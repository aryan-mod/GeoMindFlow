version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: rockfall_postgres
    environment:
      POSTGRES_DB: rockfall_db
      POSTGRES_USER: rockfall_user
      POSTGRES_PASSWORD: rockfall_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - rockfall_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rockfall_user -d rockfall_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery and caching
  redis:
    image: redis:7-alpine
    container_name: rockfall_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rockfall_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for object storage (S3 compatible)
  minio:
    image: minio/minio:latest
    container_name: rockfall_minio
    environment:
      MINIO_ROOT_USER: rockfall_minio
      MINIO_ROOT_PASSWORD: rockfall_minio_password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - rockfall_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MQTT Broker (Eclipse Mosquitto)
  mqtt:
    image: eclipse-mosquitto:2.0
    container_name: rockfall_mqtt
    ports:
      - "1883:1883"
      - "9883:9883"
    volumes:
      - ./mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mqtt/passwd:/mosquitto/config/passwd
      - mqtt_data:/mosquitto/data
      - mqtt_logs:/mosquitto/log
    networks:
      - rockfall_network
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "test", "-m", "test"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: rockfall_backend
    environment:
      - DATABASE_URL=postgresql://rockfall_user:rockfall_password@postgres:5432/rockfall_db
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=rockfall_minio
      - MINIO_SECRET_KEY=rockfall_minio_password
      - MQTT_BROKER=mqtt
      - MQTT_PORT=1883
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - backend_logs:/app/logs
    networks:
      - rockfall_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mqtt:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery Worker for async tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: rockfall_celery_worker
    command: celery -A server.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://rockfall_user:rockfall_password@postgres:5432/rockfall_db
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=rockfall_minio
      - MINIO_SECRET_KEY=rockfall_minio_password
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - celery_logs:/app/logs
    networks:
      - rockfall_network
    depends_on:
      - postgres
      - redis
      - backend
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: rockfall_celery_beat
    command: celery -A server.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://rockfall_user:rockfall_password@postgres:5432/rockfall_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - rockfall_network
    depends_on:
      - postgres
      - redis
      - backend
    restart: unless-stopped

  # Frontend Next.js Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: rockfall_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_MAPBOX_TOKEN=${MAPBOX_ACCESS_TOKEN}
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "5000:5000"
    networks:
      - rockfall_network
    depends_on:
      - backend
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: rockfall_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - rockfall_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rockfall_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - rockfall_network
    depends_on:
      - prometheus

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: rockfall_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - rockfall_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  mqtt_data:
  mqtt_logs:
  backend_logs:
  celery_logs:
  celery_beat_data:
  prometheus_data:
  grafana_data:
  nginx_logs:

networks:
  rockfall_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
